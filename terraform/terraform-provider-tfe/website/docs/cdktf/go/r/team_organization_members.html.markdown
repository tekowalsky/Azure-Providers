---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_organization_members"
description: |-
  Add or remove users from a team based on their organization memberships.
---

# tfe_team_organization_members

Add or remove one or more team members using a
[tfe_organization_membership](organization_membership.html).

~> **NOTE** on managing team memberships: Terraform currently provides four
resources for managing team memberships. This - along with [tfe_team_organization_member](team_organization_member.html) - is the preferred method as it
allows you to add members to a team by email addresses. The [tfe_team_organization_member](team_organization_member.html) is used to manage a single team membership whereas [tfe_team_organization_members](team_organization_members.html) is used to manage all team memberships at once. All four resources cannot be used for the same team simultaneously.

~> **NOTE:** This resource requires using the provider with Terraform Cloud or
an instance of Terraform Enterprise at least as recent as v202004-1.

## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organizationMembership"
import "github.com/aws-samples/dummy/gen/providers/tfe/team"
import "github.com/aws-samples/dummy/gen/providers/tfe/teamOrganizationMembers"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationMembershipSample :=
	organizationMembership.NewOrganizationMembership(this, jsii.String("sample"), &organizationMembershipConfig{
		email: jsii.String("sample@hashicorp.com"),
		organization: jsii.String("my-org-name"),
	})
	tfeOrganizationMembershipTest :=
	organizationMembership.NewOrganizationMembership(this, jsii.String("test"), &organizationMembershipConfig{
		email: jsii.String("example@hashicorp.com"),
		organization: jsii.String("my-org-name"),
	})
	tfeTeamTest := team.NewTeam(this, jsii.String("test_2"), &teamConfig{
		name: jsii.String("my-team-name"),
		organization: jsii.String("my-org-name"),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeTeamTest.OverrideLogicalId(jsii.String("test"))
	tfeTeamOrganizationMembersTest :=
	teamOrganizationMembers.NewTeamOrganizationMembers(this, jsii.String("test_3"), &teamOrganizationMembersConfig{
		organizationMembershipIds: []*string{
			cdktf.*token_AsString(tfeOrganizationMembershipTest.id),
			cdktf.*token_*AsString(tfeOrganizationMembershipSample.id),
		},
		teamId: cdktf.*token_*AsString(tfeTeamTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeTeamOrganizationMembersTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

With a set of organization members:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organizationMembership"
import "github.com/aws-samples/dummy/gen/providers/tfe/team"
import "github.com/aws-samples/dummy/gen/providers/tfe/teamOrganizationMembers"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	allUsers := cdktf.fn_Toset([]interface{}{
		jsii.String("user1@hashicorp.com"),
		jsii.String("user2@hashicorp.com"),
	})
	/*In most cases loops should be handled in the programming language context and
	    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
	    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
	    you need to keep this like it is.*/
	tfeOrganizationMembershipAllMembershipForEachIterator := cdktf.TerraformIterator_FromList(cdktf.Token_AsAny(allUsers))
	organizationMembership.NewOrganizationMembership(this, jsii.String("all_membership"), &organizationMembershipConfig{
		email: cdktf.Token_AsString(tfeOrganizationMembershipAllMembershipForEachIterator.key),
		organization: jsii.String("my-org-name"),
		forEach: tfeOrganizationMembershipAllMembershipForEachIterator,
	})
	tfeTeamTest := team.NewTeam(this, jsii.String("test"), &teamConfig{
		name: jsii.String("my-team-name"),
		organization: jsii.String("my-org-name"),
	})
	tfeTeamOrganizationMembersTest :=
	teamOrganizationMembers.NewTeamOrganizationMembers(this, jsii.String("test_2"), &teamOrganizationMembersConfig{
		organizationMembershipIds: cdktf.Token_AsList("${[ for member in ${" + allUsers + "} : tfe_organization_membership.all_membership[member].id]}"),
		teamId: cdktf.Token_*AsString(tfeTeamTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeTeamOrganizationMembersTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

## Argument Reference

The following arguments are supported:

* `TeamId` - (Required) ID of the team.
* `OrganizationMembershipIds` - (Required) IDs of organization memberships to be added.

## Import

A resource can be imported by using the team ID `<TEAM ID>`
as the import ID. For example:

```shell
terraform import tfe_team_organization_members.test team-47qC3LmA47piVan7
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-33aecc66311e81000883c796b8cb45f6d38854f98dd14521b79a586c8e4b4566 -->