---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_variable_set"
description: |-
  Manages variable sets.
---

# tfe_variable_set

Creates, updates and destroys variable sets.

## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/project"
import "github.com/aws-samples/dummy/gen/providers/tfe/variableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspace"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspaceVariableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/projectVariableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/variable"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeProjectTest := project.NewProject(this, jsii.String("test_1"), &projectConfig{
		name: jsii.String("projectname"),
		organization: cdktf.*token_AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeProjectTest.OverrideLogicalId(jsii.String("test"))
	tfeVariableSetTest := variableSet.NewVariableSet(this, jsii.String("test_2"), &variableSetConfig{
		description: jsii.String("Some description."),
		name: jsii.String("Test Varset"),
		organization: cdktf.*token_*AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeVariableSetTest.OverrideLogicalId(jsii.String("test"))
	tfeWorkspaceTest := workspace.NewWorkspace(this, jsii.String("test_3"), &workspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: cdktf.*token_*AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeWorkspaceTest.OverrideLogicalId(jsii.String("test"))
	tfeWorkspaceVariableSetTest :=
	workspaceVariableSet.NewWorkspaceVariableSet(this, jsii.String("test_4"), &workspaceVariableSetConfig{
		variableSetId: cdktf.*token_*AsString(tfeVariableSetTest.id),
		workspaceId: cdktf.*token_*AsString(tfeWorkspaceTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeWorkspaceVariableSetTest.OverrideLogicalId(jsii.String("test"))
	tfeProjectVariableSetTest :=
	projectVariableSet.NewProjectVariableSet(this, jsii.String("test_5"), &projectVariableSetConfig{
		projectId: cdktf.*token_*AsString(tfeProjectTest.id),
		variableSetId: cdktf.*token_*AsString(tfeVariableSetTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeProjectVariableSetTest.OverrideLogicalId(jsii.String("test"))
	variable.NewVariable(this, jsii.String("test-a"), &variableConfig{
		category: jsii.String("terraform"),
		description: jsii.String("a useful description"),
		key: jsii.String("seperate_variable"),
		value: jsii.String("my_value_name"),
		variableSetId: cdktf.*token_*AsString(tfeVariableSetTest.id),
	})
	variable.NewVariable(this, jsii.String("test-b"), &variableConfig{
		category: jsii.String("env"),
		description: jsii.String("an environment variable"),
		key: jsii.String("another_variable"),
		value: jsii.String("my_value_name"),
		variableSetId: cdktf.*token_*AsString(tfeVariableSetTest.id),
	})
	return this
}
```

Creating a global variable set:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/variableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/variable"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeVariableSetTest := variableSet.NewVariableSet(this, jsii.String("test_1"), &variableSetConfig{
		description: jsii.String("Variable set applied to all workspaces."),
		global: jsii.Boolean(true),
		name: jsii.String("Global Varset"),
		organization: cdktf.*token_AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeVariableSetTest.OverrideLogicalId(jsii.String("test"))
	variable.NewVariable(this, jsii.String("test-a"), &variableConfig{
		category: jsii.String("terraform"),
		description: jsii.String("a useful description"),
		key: jsii.String("seperate_variable"),
		value: jsii.String("my_value_name"),
		variableSetId: cdktf.*token_*AsString(tfeVariableSetTest.id),
	})
	variable.NewVariable(this, jsii.String("test-b"), &variableConfig{
		category: jsii.String("env"),
		description: jsii.String("an environment variable"),
		key: jsii.String("another_variable"),
		value: jsii.String("my_value_name"),
		variableSetId: cdktf.*token_*AsString(tfeVariableSetTest.id),
	})
	return this
}
```

## Argument Reference

The following arguments are supported:

* `Name` - (Required) Name of the variable set.
* `Description` - (Optional) Description of the variable set.
* `Global` - (Optional) Whether or not the variable set applies to all workspaces in the organization. Defaults to `False`.
* `Organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `WorkspaceIds` - **Deprecated** (Optional) IDs of the workspaces that use the variable set.
  Must not be set if `Global` is set. This argument is mutually exclusive with using the resource
  [tfe_workspace_variable_set](workspace_variable_set.html) which is the preferred method of associating a workspace
  with a variable set.

## Attributes Reference

* `Id` - The ID of the variable set.

## Import

Variable sets can be imported; use `<VARIABLE SET ID>` as the import ID. For example:

```shell
terraform import tfe_variable_set.test varset-5rTwnSaRPogw6apb
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f7d62718eed35f26440fb694022ebdc09326a9d03b988efb8a3c149eb3b94b1a -->