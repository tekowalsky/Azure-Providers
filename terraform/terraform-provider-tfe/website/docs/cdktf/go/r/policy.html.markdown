---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_policy"
description: |-
  Manages policies.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_policy

Policies are rules enforced on Terraform runs. You can use policies to validate that the Terraform plan complies with security rules and best practices.
Two policy-as-code frameworks are integrated with Terraform Enterprise: Sentinel and Open Policy Agent (OPA).

Policies are configured on a per-organization level and are organized and
grouped into policy sets, which define the workspaces on which policies are
enforced during runs.

## Example Usage

Basic usage for Sentinel:

```go
import constructs "github.com/aws/constructs-go/constructs"
import cdktf "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/policy"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	policy.NewPolicy(this, jsii.String("test"), &policyConfig{
		description: jsii.String("This policy always passes"),
		enforceMode: jsii.String("hard-mandatory"),
		kind: jsii.String("sentinel"),
		name: jsii.String("my-policy-name"),
		organization: jsii.String("my-org-name"),
		policy: jsii.String("main = rule { true }"),
	})
	return this
}
```

Basic usage for Open Policy Agent(OPA):

```go
import constructs "github.com/aws/constructs-go/constructs"
import cdktf "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/policy"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	policy.NewPolicy(this, jsii.String("test"), &policyConfig{
		description: jsii.String("This policy always passes"),
		enforceMode: jsii.String("mandatory"),
		kind: jsii.String("opa"),
		name: jsii.String("my-policy-name"),
		organization: jsii.String("my-org-name"),
		policy: jsii.String("package example rule[\\\"not allowed\\\"] { false }"),
		query: jsii.String("data.example.rule"),
	})
	return this
}
```

## Argument Reference

The following arguments are supported:

* `Name` - (Required) Name of the policy.
* `Description` - (Optional) A description of the policy's purpose.
* `Organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `Kind` - (Optional) The policy-as-code framework associated with the policy.
   Defaults to `Sentinel` if not provided. Valid values are `Sentinel` and `Opa`.
* `Query` - (Optional) The OPA query to identify a specific policy rule that
   needs to run within your Rego code. Required for all OPA policies.
* `Policy` - (Required) The actual policy itself.
* `EnforceMode` - (Optional) The enforcement level of the policy. Valid
  values for Sentinel are `Advisory`, `HardMandatory` and `SoftMandatory`. Defaults
  to `SoftMandatory`. Valid values for OPA are `Advisory` and `Mandatory`. Defaults
  to `Advisory`.

## Attributes Reference

* `Id` - The ID of the policy.

## Import

Policies can be imported; use `<ORGANIZATION NAME>/<POLICY ID>` as the
import ID. For example:

```shell
terraform import tfe_policy.test my-org-name/pol-wAs3zYmWAhYK7peR
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ea229695faa93801409757c25356cacdfc7085cbdb339121ab75a922171703db -->