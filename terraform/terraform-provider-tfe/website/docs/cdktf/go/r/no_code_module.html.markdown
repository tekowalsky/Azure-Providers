---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_no_code_module"
description: |-
  Manages no code settings for registry modules
---


<!-- Please do not edit this file, it is generated. -->
# tfe_no_code_module

Creates, updates and destroys no-code module for registry modules.

## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/registryModule"
import "github.com/aws-samples/dummy/gen/providers/tfe/noCodeModule"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationFoobar := organization.NewOrganization(this, jsii.String("foobar"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeRegistryModuleFoobar := registryModule.NewRegistryModule(this, jsii.String("foobar_1"), &registryModuleConfig{
		moduleProvider: jsii.String("my_provider"),
		name: jsii.String("test_module"),
		organization: cdktf.Token_AsString(tfeOrganizationFoobar.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeRegistryModuleFoobar.OverrideLogicalId(jsii.String("foobar"))
	tfeNoCodeModuleFoobar := noCodeModule.NewNoCodeModule(this, jsii.String("foobar_2"), &noCodeModuleConfig{
		organization: cdktf.Token_*AsString(tfeOrganizationFoobar.id),
		registryModule: cdktf.Token_*AsString(tfeRegistryModuleFoobar.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeNoCodeModuleFoobar.OverrideLogicalId(jsii.String("foobar"))
	return this
}
```

Creating a no-code module with variable options:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/registryModule"
import "github.com/aws-samples/dummy/gen/providers/tfe/noCodeModule"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationFoobar := organization.NewOrganization(this, jsii.String("foobar"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeRegistryModuleFoobar := registryModule.NewRegistryModule(this, jsii.String("foobar_1"), &registryModuleConfig{
		moduleProvider: jsii.String("my_provider"),
		name: jsii.String("test_module"),
		organization: cdktf.Token_AsString(tfeOrganizationFoobar.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeRegistryModuleFoobar.OverrideLogicalId(jsii.String("foobar"))
	tfeNoCodeModuleFoobar := noCodeModule.NewNoCodeModule(this, jsii.String("foobar_2"), &noCodeModuleConfig{
		organization: cdktf.Token_*AsString(tfeOrganizationFoobar.id),
		registryModule: cdktf.Token_*AsString(tfeRegistryModuleFoobar.id),
		variableOptions: []interface{}{
			&noCodeModuleVariableOptions{
				name: jsii.String("ami"),
				options: []*string{
					jsii.String("ami-0"),
					jsii.String("ami-1"),
					jsii.String("ami-2"),
				},
				type: jsii.String("string"),
			},
			&noCodeModuleVariableOptions{
				name: jsii.String("region"),
				options: []*string{
					jsii.String("us-east-1"),
					jsii.String("us-east-2"),
					jsii.String("us-west-1"),
				},
				type: jsii.String("string"),
			},
		},
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeNoCodeModuleFoobar.OverrideLogicalId(jsii.String("foobar"))
	return this
}
```

## Argument Reference

The following arguments are supported:

- `Name` - (Required) Name of the variable set.
- `Organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
- `RegistryModule` - (Required) The ID of the registry module to associate with the no code module.
- `Enabled` - (Required) Whether or not no-code module is enabled for the associated registry module
- `VersionPin` - (Optional) The version of the module to pin to.
- `VariableOptions` - (Optional) A list of variable options to associate with the no code module.
  - `Name` - (Required) The name of the variable option.
  - `Type` - (Required) The type of the variable option.
  - `Options` - (Required) A list of options for the variable option.

## Attributes Reference

- `Id` - The ID of the no code module.

## Import

No-code modules can be imported; use `<NO CODE MODULE ID>` as the import ID. For example:

```shell
terraform import tfe_no_code_module.test nocode-qV9JnKRkmtMa4zcA
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-1204d286dd93ad6b8890ea46ff233ae490bae459320c56bddd6dbe876dc0cdb5 -->