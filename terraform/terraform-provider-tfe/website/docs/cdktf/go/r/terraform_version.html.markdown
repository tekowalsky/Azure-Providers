---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_terraform_version"
description: |-
  Manages Terraform versions
---

# tfe_terraform_version

Manage Terraform versions available on Terraform Cloud/Enterprise.

## Example Usage

Basic Usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import cdktf "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/terraformVersion"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	terraformVersion.NewTerraformVersion(this, jsii.String("test"), &terraformVersionConfig{
		sha: jsii.String("e75ac73deb69a6b3aa667cb0b8b731aee79e2904"),
		url: jsii.String("https://tfe-host.com/path/to/terraform.zip"),
		version: jsii.String("1.1.2-custom"),
	})
	return this
}
```

## Argument Reference

The following arguments are supported:

* `Version` - (Required) A semantic version string in N.N.N or N.N.N-bundleName format.
* `Url` - (Required) The URL where a ZIP-compressed 64-bit Linux binary of this version can be downloaded.
* `Sha` - (Required) The SHA-256 checksum of the compressed Terraform binary.
* `Official` - (Optional) Whether or not this is an official release of Terraform. Defaults to "false".
* `Enabled` - (Optional) Whether or not this version of Terraform is enabled for use in Terraform Cloud/Enterprise. Defaults to "true".
* `Beta` - (Optional) Whether or not this version of Terraform is beta pre-release. Defaults to "false".
* `Deprecated` - (Optional) Whether or not this version of Terraform is deprecated. Defaults to "false".
* `DeprecatedReason` - (Optional) Additional context about why a version of Terraform is deprecated. Defaults to "null" unless `Deprecated` is true.

## Attributes Reference

* `Id` The ID of the Terraform version

## Import

Terraform versions can be imported; use `<TERRAFORM VERSION ID>` or `<TERRAFORM VERSION NUMBER>` as the import ID. For example:

```shell
terraform import tfe_terraform_version.test tool-L4oe7rNwn7J4E5Yr
```

```shell
terraform import tfe_terraform_version.test 1.1.2
```

-> **Note:** You can fetch a Terraform version ID from the URL of an existing version in the Terraform Cloud UI. The ID is in the format `tool-<RANDOM STRING>`

<!-- cache-key: cdktf-0.17.0-pre.15 input-432c6fecfa9af93e492bead8b0ced7287250b8cd14070d2af0bbbadc42927b88 -->