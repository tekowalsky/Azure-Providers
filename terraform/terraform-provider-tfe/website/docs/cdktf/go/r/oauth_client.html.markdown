---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_oauth_client"
description: |-
  Manages OAuth clients.
---

# tfe_oauth_client

An OAuth Client represents the connection between an organization and a VCS
provider.

-> **Note:** This resource does not currently support creation of Azure DevOps Services OAuth clients.

## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import cdktf "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/oauthClient"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	oauthClient.NewOauthClient(this, jsii.String("test"), &oauthClientConfig{
		apiUrl: jsii.String("https://api.github.com"),
		httpUrl: jsii.String("https://github.com"),
		name: jsii.String("my-github-oauth-client"),
		oauthToken: jsii.String("my-vcs-provider-token"),
		organization: jsii.String("my-org-name"),
		serviceProvider: jsii.String("github"),
	})
	return this
}
```

#### Azure DevOps Server Usage

See [documentation for TFC/E setup](https://developer.hashicorp.com/terraform/cloud-docs/vcs/azure-devops-server).

**Note:** This resource requires a private key when creating Azure DevOps Server OAuth clients.

```go
import constructs "github.com/aws/constructs-go/constructs"
import cdktf "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/oauthClient"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	oauthClient.NewOauthClient(this, jsii.String("test"), &oauthClientConfig{
		apiUrl: jsii.String("https://ado.example.com"),
		httpUrl: jsii.String("https://ado.example.com"),
		name: jsii.String("my-ado-oauth-client"),
		oauthToken: jsii.String("my-vcs-provider-token"),
		organization: jsii.String("my-org-name"),
		privateKey: jsii.String("-----BEGIN RSA PRIVATE KEY-----\ncontent\n-----END RSA PRIVATE KEY-----\n"),
		serviceProvider: jsii.String("ado_server"),
	})
	return this
}
```

#### BitBucket Server Usage

See [documentation for TFC/E setup](https://developer.hashicorp.com/terraform/cloud-docs/vcs/bitbucket-server).

When using BitBucket Server, you must use three required fields: `Key`, `Secret`, `RsaPublicKey`.


```go
import constructs "github.com/aws/constructs-go/constructs"
import cdktf "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/oauthClient"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	oauthClient.NewOauthClient(this, jsii.String("test"), &oauthClientConfig{
		apiUrl: jsii.String("https://bbs.example.com"),
		httpUrl: jsii.String("https://bss.example.com"),
		key: jsii.String("<consumer key>"),
		name: jsii.String("my-bbs-oauth-client"),
		organization: jsii.String("my-org-name"),
		rsaPublicKey: jsii.String("-----BEGIN PUBLIC KEY-----\ncontent\n-----END PUBLIC KEY-----\n"),
		secret: jsii.String("-----BEGIN RSA PRIVATE KEY-----\ncontent\n-----END RSA PRIVATE KEY-----\n"),
		serviceProvider: jsii.String("bitbucket_server"),
	})
	return this
}
```

## Argument Reference

The following arguments are supported:

* `Name` - (Optional) Display name for the OAuth Client. Defaults to the `ServiceProvider` if not supplied.
* `Organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `ApiUrl` - (Required) The base URL of your VCS provider's API (e.g.
  `Https://apiGithubCom` or `Https://gheExampleCom/api/v3`).
* `HttpUrl` - (Required) The homepage of your VCS provider (e.g.
  `Https://githubCom` or `Https://gheExampleCom`).
* `OauthToken` - The token string you were given by your VCS provider, e.g. `GhpXxxxxxxxxxxxxxx` for a GitHub personal access token. For more information on how to generate this token string for your VCS provider, see the [Create an OAuth Client](https://developer.hashicorp.com/terraform/cloud-docs/api-docs/oauth-clients#create-an-oauth-client) documentation.
* `PrivateKey` - (Required for `AdoServer`) The text of the private key associated with your Azure DevOps Server account
* `Key` - The OAuth Client key can refer to a Consumer Key, Application Key,
  or another type of client key for the VCS provider.
* `Secret` - (Required for `BitbucketServer`) The OAuth Client secret is used for BitBucket Server, this secret is the
  the text of the SSH private key associated with your BitBucket Server
Application Link.
* `RsaPublicKey` - (Required for `BitbucketServer`) Required for BitBucket
  Server in conjunction with the secret. Not used for any other providers. The
text of the SSH public key associated with your BitBucket Server Application
Link.
* `ServiceProvider` - (Required) The VCS provider being connected with. Valid
  options are `AdoServer`, `AdoServices`, `BitbucketHosted`, `BitbucketServer`, `Github`, `GithubEnterprise`, `GitlabHosted`,
  `GitlabCommunityEdition`, or `GitlabEnterpriseEdition`.

## Attributes Reference

* `Id` - The ID of the OAuth client.
* `OauthTokenId` - The ID of the OAuth token associated with the OAuth client.

<!-- cache-key: cdktf-0.17.0-pre.15 input-0dea494ef76c038939d94b5ae6a0e741e36a87509a350f558cd11d098bf1bde9 -->