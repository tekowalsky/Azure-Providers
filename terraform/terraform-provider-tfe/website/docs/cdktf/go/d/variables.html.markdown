---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_variables"
description: |-
  Get information on a workspace variables.
---

# Data Source: tfe_variables

This data source is used to retrieve all variables defined in a specified workspace

## Example Usage

For workspace variables:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/dataTfeWorkspace"
import "github.com/aws-samples/dummy/gen/providers/tfe/dataTfeVariables"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	dataTfeWorkspaceTest := dataTfeWorkspace.NewDataTfeWorkspace(this, jsii.String("test"), &dataTfeWorkspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: jsii.String("my-org-name"),
	})
	dataTfeVariablesTest := dataTfeVariables.NewDataTfeVariables(this, jsii.String("test_1"), &dataTfeVariablesConfig{
		workspaceId: cdktf.Token_AsString(dataTfeWorkspaceTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	dataTfeVariablesTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

For variable set variables:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/dataTfeVariableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/dataTfeVariables"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	dataTfeVariableSetTest :=
	dataTfeVariableSet.NewDataTfeVariableSet(this, jsii.String("test"), &dataTfeVariableSetConfig{
		name: jsii.String("my-variable-set-name"),
		organization: jsii.String("my-org-name"),
	})
	dataTfeVariablesTest := dataTfeVariables.NewDataTfeVariables(this, jsii.String("test_1"), &dataTfeVariablesConfig{
		variableSetId: cdktf.Token_AsString(dataTfeVariableSetTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	dataTfeVariablesTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

## Argument Reference

One of following arguments are required:

* `WorkspaceId` - ID of the workspace.
* `VariableSetId` - ID of the workspace.

## Attributes Reference

* `Variables` - List containing all terraform and environment variables configured on the workspace
* `Terraform` - List containing terraform variables configured on the workspace
* `Env` - List containing environment variables configured on the workspace

The `variables, terraform and env` blocks contains:

* `Id` - The variable Id
* `Name` - The variable Key name
* `Value` -  The variable value. If the variable is sensitive this value will be empty.
* `Category` -  The category of the variable (terraform or environment)
* `Sensitive` - If the variable is marked as sensitive or not
* `Hcl` - If the variable is marked as HCL or not

<!-- cache-key: cdktf-0.17.0-pre.15 input-635190fbcaed3640f0f12f181a3eae6abefebcbcad7f5806bfb392bb4097eaef -->