---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_organization_members"
description: |-
  Add or remove users from a team based on their organization memberships.
---

# tfe_team_organization_members

Add or remove one or more team members using a
[tfe_organization_membership](organization_membership.html).

~> **NOTE** on managing team memberships: Terraform currently provides four
resources for managing team memberships. This - along with [tfe_team_organization_member](team_organization_member.html) - is the preferred method as it
allows you to add members to a team by email addresses. The [tfe_team_organization_member](team_organization_member.html) is used to manage a single team membership whereas [tfe_team_organization_members](team_organization_members.html) is used to manage all team memberships at once. All four resources cannot be used for the same team simultaneously.

~> **NOTE:** This resource requires using the provider with Terraform Cloud or
an instance of Terraform Enterprise at least as recent as v202004-1.

## Example Usage

Basic usage:

```java
import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.tfe.organizationMembership.*;
import gen.providers.tfe.team.*;
import gen.providers.tfe.teamOrganizationMembers.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        OrganizationMembership tfeOrganizationMembershipSample =
        new OrganizationMembership(this, "sample", new OrganizationMembershipConfig()
                .email("sample@hashicorp.com")
                .organization("my-org-name")
                );
        OrganizationMembership tfeOrganizationMembershipTest =
        new OrganizationMembership(this, "test", new OrganizationMembershipConfig()
                .email("example@hashicorp.com")
                .organization("my-org-name")
                );
        Team tfeTeamTest = new Team(this, "test_2", new TeamConfig()
                .name("my-team-name")
                .organization("my-org-name")
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeTeamTest.overrideLogicalId("test");
        TeamOrganizationMembers tfeTeamOrganizationMembersTest =
        new TeamOrganizationMembers(this, "test_3", new TeamOrganizationMembersConfig()
                .organizationMembershipIds(List.of(Token.asString(tfeOrganizationMembershipTest.getId()), Token.asString(tfeOrganizationMembershipSample.getId())))
                .teamId(Token.asString(tfeTeamTest.getId()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeTeamOrganizationMembersTest.overrideLogicalId("test");
    }
}
```

With a set of organization members:

```java
import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.tfe.organizationMembership.*;
import gen.providers.tfe.team.*;
import gen.providers.tfe.teamOrganizationMembers.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        String[] allUsers = Fn.toset(List.of("user1@hashicorp.com", "user2@hashicorp.com"));
        /*In most cases loops should be handled in the programming language context and
            not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
            you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
            you need to keep this like it is.*/
        ListTerraformIterator tfeOrganizationMembershipAllMembershipForEachIterator = TerraformIterator.fromList(Token.asAny(allUsers));
        new OrganizationMembership(this, "all_membership", new OrganizationMembershipConfig()
                .email(Token.asString(tfeOrganizationMembershipAllMembershipForEachIterator.getKey()))
                .organization("my-org-name")
                .forEach(tfeOrganizationMembershipAllMembershipForEachIterator)
                );
        Team tfeTeamTest = new Team(this, "test", new TeamConfig()
                .name("my-team-name")
                .organization("my-org-name")
                );
        TeamOrganizationMembers tfeTeamOrganizationMembersTest =
        new TeamOrganizationMembers(this, "test_2", new TeamOrganizationMembersConfig()
                .organizationMembershipIds(Token.asList("${[ for member in ${" + allUsers + "} : tfe_organization_membership.all_membership[member].id]}"))
                .teamId(Token.asString(tfeTeamTest.getId()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeTeamOrganizationMembersTest.overrideLogicalId("test");
    }
}
```

## Argument Reference

The following arguments are supported:

* `teamId` - (Required) ID of the team.
* `organizationMembershipIds` - (Required) IDs of organization memberships to be added.

## Import

A resource can be imported by using the team ID `<TEAM ID>`
as the import ID. For example:

```shell
terraform import tfe_team_organization_members.test team-47qC3LmA47piVan7
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-33aecc66311e81000883c796b8cb45f6d38854f98dd14521b79a586c8e4b4566 -->