---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_members"
description: |-
  Manages users in a team.
---

# tfe_team_members

Manages users in a team.

~> **NOTE** on managing team memberships: Terraform currently provides four
resources for managing team memberships.
The [tfe_team_organization_member](team_organization_member.html) and [tfe_team_organization_members](team_organization_members.html) resources are
the preferred way. The [tfe_team_member](team_member.html)
resource can be used multiple times as it manages the team membership for a
single user.  The [tfe_team_members](team_members.html) resource, on the other
hand, is used to manage all team memberships for a specific team and can only be
used once. All four resources cannot be used for the same team simultaneously.

## Example Usage

Basic usage:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeTeamTest = new Team.Team(this, "test", new TeamConfig {
            Name = "my-team-name",
            Organization = "my-org-name"
        });
        var tfeTeamMembersTest = new TeamMembers.TeamMembers(this, "test_1", new TeamMembersConfig {
            TeamId = Token.AsString(tfeTeamTest.Id),
            Usernames = new [] { "admin", "sander" }
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeTeamMembersTest.OverrideLogicalId("test");
    }
}
```

With a set of usernames:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var allUsernames = Fn.Toset(new [] { "user1", "user2" });
        var tfeTeamTest = new Team.Team(this, "test", new TeamConfig {
            Name = "my-team-name",
            Organization = "my-org-name"
        });
        var tfeTeamMembersTest = new TeamMembers.TeamMembers(this, "test_1", new TeamMembersConfig {
            TeamId = Token.AsString(tfeTeamTest.Id),
            Usernames = Token.AsList("${[ for user in ${" + allUsernames + "} : user]}")
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeTeamMembersTest.OverrideLogicalId("test");
    }
}
```

## Argument Reference

The following arguments are supported:

* `TeamId` - (Required) ID of the team.
* `Usernames` - (Required) Names of the users to add.

## Attributes Reference

* `Id` - The ID of the team.

## Import

Team members can be imported; use `<TEAM ID>` as the import ID. For example:

```shell
terraform import tfe_team_members.test team-47qC3LmA47piVan7
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-37e1078f8bb8f3145d8680ab69ee6750373f41a03589ff0885d16ebc69a1e13c -->