---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_registry_module"
description: |-
  Manages registry modules
---


<!-- Please do not edit this file, it is generated. -->
# tfe_registry_module

Terraform Cloud's private module registry helps you share Terraform modules across your organization.

## Example Usage

Basic usage with VCS:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTestOrganization = new Organization.Organization(this, "test-organization", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeOauthClientTestOauthClient = new OauthClient.OauthClient(this, "test-oauth-client", new OauthClientConfig {
            ApiUrl = "https://api.github.com",
            HttpUrl = "https://github.com",
            OauthToken = "my-vcs-provider-token",
            Organization = Token.AsString(tfeOrganizationTestOrganization.Name),
            ServiceProvider = "github"
        });
        new RegistryModule.RegistryModule(this, "test-registry-module", new RegistryModuleConfig {
            VcsRepo = new RegistryModuleVcsRepo {
                DisplayIdentifier = "my-org-name/terraform-provider-name",
                Identifier = "my-org-name/terraform-provider-name",
                OauthTokenId = Token.AsString(tfeOauthClientTestOauthClient.OauthTokenId)
            }
        });
    }
}
```

Create private registry module with GitHub App:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTestOrganization = new Organization.Organization(this, "test-organization", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var dataTfeGithubAppInstallationGhaInstallation =
        new DataTfeGithubAppInstallation.DataTfeGithubAppInstallation(this, "gha_installation", new DataTfeGithubAppInstallationConfig {
            Name = "YOUR_GH_NAME"
        });
        new RegistryModule.RegistryModule(this, "petstore", new RegistryModuleConfig {
            Organization = Token.AsString(tfeOrganizationTestOrganization.Name),
            VcsRepo = new RegistryModuleVcsRepo {
                DisplayIdentifier = "GH_NAME/REPO_NAME",
                GithubAppInstallationId = Token.AsString(dataTfeGithubAppInstallationGhaInstallation.Id),
                Identifier = "GH_NAME/REPO_NAME"
            }
        });
    }
}
```

Create private registry module without VCS:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTestOrganization = new Organization.Organization(this, "test-organization", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        new RegistryModule.RegistryModule(this, "test-private-registry-module", new RegistryModuleConfig {
            ModuleProvider = "my_provider",
            Name = "another_test_module",
            Organization = Token.AsString(tfeOrganizationTestOrganization.Name),
            RegistryName = "private"
        });
    }
}
```

Create public registry module:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTestOrganization = new Organization.Organization(this, "test-organization", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        new RegistryModule.RegistryModule(this, "test-public-registry-module", new RegistryModuleConfig {
            ModuleProvider = "aws",
            Name = "vpc",
            Namespace = "terraform-aws-modules",
            Organization = Token.AsString(tfeOrganizationTestOrganization.Name),
            RegistryName = "public"
        });
    }
}
```

Create no-code provisioning registry module:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTestOrganization = new Organization.Organization(this, "test-organization", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeRegistryModuleTestNoCodeProvisioningRegistryModule =
        new RegistryModule.RegistryModule(this, "test-no-code-provisioning-registry-module", new RegistryModuleConfig {
            ModuleProvider = "aws",
            Name = "vpc",
            Namespace = "terraform-aws-modules",
            Organization = Token.AsString(tfeOrganizationTestOrganization.Name),
            RegistryName = "public"
        });
        new NoCodeModule.NoCodeModule(this, "foobar", new NoCodeModuleConfig {
            Organization = Token.AsString(tfeOrganizationTestOrganization.Id),
            RegistryModule = Token.AsString(tfeRegistryModuleTestNoCodeProvisioningRegistryModule.Id)
        });
    }
}
```

## Argument Reference

The following arguments are supported:

* `VcsRepo` - (Optional) Settings for the registry module's VCS repository. Forces a
  new resource if changed. One of `VcsRepo` or `ModuleProvider` is required.
* `ModuleProvider` - (Optional) Specifies the Terraform provider that this module is used for. For example, "aws"
* `Name` - (Optional) The name of registry module. It must be set if `ModuleProvider` is used.
* `Organization` - (Optional) The name of the organization associated with the registry module. It must be set if `ModuleProvider` is used, or if `VcsRepo` is used via a GitHub App.
* `Namespace` - (Optional) The namespace of a public registry module. It can be used if `ModuleProvider` is set and `RegistryName` is public.
* `RegistryName` - (Optional) Whether the registry module is private or public. It can be used if `ModuleProvider` is set.

The `VcsRepo` block supports:

* `DisplayIdentifier` - (Required) The display identifier for your VCS repository.
  For most VCS providers outside of BitBucket Cloud, this will match the `Identifier`
  string.
* `Identifier` - (Required) A reference to your VCS repository in the format
  `<organization>/<repository>` where `<organization>` and `<repository>` refer to the organization (or project key, for Bitbucket Server)
  and repository in your VCS provider. The format for Azure DevOps is <organization>/<project>/\_git/<repository>.
* `OauthTokenId` - (Optional) Token ID of the VCS Connection (OAuth Connection Token) to use. This conflicts with `GithubAppInstallationId` and can only be used if `GithubAppInstallationId` is not used.
* `GithubAppInstallationId` - (Optional) The installation id of the Github App. This conflicts with `OauthTokenId` and can only be used if `OauthTokenId` is not used.

## Attributes Reference

* `Id` - The ID of the registry module.
* `ModuleProvider` - The Terraform provider that this module is used for.
* `Name` - The name of registry module.
* `Organization` - The name of the organization associated with the registry module.
* `Namespace` - The namespace of the module. For private modules this is the name of the organization that owns the module.
* `RegistryName` - The registry name of the registry module depicting whether the registry module is private or public.
* `NoCode` - **Deprecated** The property that will enable or disable a module as no-code provisioning ready.
Use the tfe_no_code_module resource instead.

## Import

Registry modules can be imported; use `<ORGANIZATION>/<REGISTRY_NAME>/<NAMESPACE>/<REGISTRY MODULE NAME>/<REGISTRY MODULE PROVIDER>/<REGISTRY MODULE ID>` as the import ID. For example:

```shell
terraform import tfe_registry_module.test my-org-name/public/namespace/name/provider/mod-qV9JnKRkmtMa4zcA
```

**Deprecated** use `<ORGANIZATION NAME>/<REGISTRY MODULE NAME>/<REGISTRY MODULE PROVIDER>/<REGISTRY MODULE ID>` as the import ID. For example:

```shell
terraform import tfe_registry_module.test my-org-name/name/provider/mod-qV9JnKRkmtMa4zcA
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-73fb04cba01303aff48c3c32c7ea49194a8f795307ef90c104807e23257c79ac -->