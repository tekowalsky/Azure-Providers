---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_organization_members"
description: |-
  Add or remove users from a team based on their organization memberships.
---

# tfe_team_organization_members

Add or remove one or more team members using a
[tfe_organization_membership](organization_membership.html).

~> **NOTE** on managing team memberships: Terraform currently provides four
resources for managing team memberships. This - along with [tfe_team_organization_member](team_organization_member.html) - is the preferred method as it
allows you to add members to a team by email addresses. The [tfe_team_organization_member](team_organization_member.html) is used to manage a single team membership whereas [tfe_team_organization_members](team_organization_members.html) is used to manage all team memberships at once. All four resources cannot be used for the same team simultaneously.

~> **NOTE:** This resource requires using the provider with Terraform Cloud or
an instance of Terraform Enterprise at least as recent as v202004-1.

## Example Usage

Basic usage:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationMembershipSample =
        new OrganizationMembership.OrganizationMembership(this, "sample", new OrganizationMembershipConfig {
            Email = "sample@hashicorp.com",
            Organization = "my-org-name"
        });
        var tfeOrganizationMembershipTest =
        new OrganizationMembership.OrganizationMembership(this, "test", new OrganizationMembershipConfig {
            Email = "example@hashicorp.com",
            Organization = "my-org-name"
        });
        var tfeTeamTest = new Team.Team(this, "test_2", new TeamConfig {
            Name = "my-team-name",
            Organization = "my-org-name"
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeTeamTest.OverrideLogicalId("test");
        var tfeTeamOrganizationMembersTest =
        new TeamOrganizationMembers.TeamOrganizationMembers(this, "test_3", new TeamOrganizationMembersConfig {
            OrganizationMembershipIds = new [] { Token.AsString(tfeOrganizationMembershipTest.Id), Token.AsString(tfeOrganizationMembershipSample.Id) },
            TeamId = Token.AsString(tfeTeamTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeTeamOrganizationMembersTest.OverrideLogicalId("test");
    }
}
```

With a set of organization members:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var allUsers = Fn.Toset(new [] { "user1@hashicorp.com", "user2@hashicorp.com" });
        /*In most cases loops should be handled in the programming language context and
            not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
            you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
            you need to keep this like it is.*/
        var tfeOrganizationMembershipAllMembershipForEachIterator = TerraformIterator.FromList(Token.AsAny(allUsers));
        new OrganizationMembership.OrganizationMembership(this, "all_membership", new OrganizationMembershipConfig {
            Email = Token.AsString(tfeOrganizationMembershipAllMembershipForEachIterator.Key),
            Organization = "my-org-name",
            ForEach = tfeOrganizationMembershipAllMembershipForEachIterator
        });
        var tfeTeamTest = new Team.Team(this, "test", new TeamConfig {
            Name = "my-team-name",
            Organization = "my-org-name"
        });
        var tfeTeamOrganizationMembersTest =
        new TeamOrganizationMembers.TeamOrganizationMembers(this, "test_2", new TeamOrganizationMembersConfig {
            OrganizationMembershipIds = Token.AsList("${[ for member in ${" + allUsers + "} : tfe_organization_membership.all_membership[member].id]}"),
            TeamId = Token.AsString(tfeTeamTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeTeamOrganizationMembersTest.OverrideLogicalId("test");
    }
}
```

## Argument Reference

The following arguments are supported:

* `TeamId` - (Required) ID of the team.
* `OrganizationMembershipIds` - (Required) IDs of organization memberships to be added.

## Import

A resource can be imported by using the team ID `<TEAM ID>`
as the import ID. For example:

```shell
terraform import tfe_team_organization_members.test team-47qC3LmA47piVan7
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-33aecc66311e81000883c796b8cb45f6d38854f98dd14521b79a586c8e4b4566 -->