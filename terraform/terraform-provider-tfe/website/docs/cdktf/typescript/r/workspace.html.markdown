---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_workspace"
description: |-
  Manages workspaces.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_workspace

Provides a workspace resource.

~> **NOTE:** Using `globalRemoteState` or `remoteStateConsumerIds` requires using the provider with Terraform Cloud or an instance of Terraform Enterprise at least as recent as v202104-1.

## Example Usage

Basic usage:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { Workspace } from "./.gen/providers/tfe/workspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    new Workspace(this, "test", {
      name: "my-workspace-name",
      organization: testOrganization.name,
      tagNames: ["test", "app"],
    });
  }
}

```

With `executionMode` of `agent`:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AgentPool } from "./.gen/providers/tfe/agent-pool";
import { Organization } from "./.gen/providers/tfe/organization";
import { Workspace } from "./.gen/providers/tfe/workspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const testAgentPool = new AgentPool(this, "test-agent-pool", {
      name: "my-agent-pool-name",
      organization: testOrganization.name,
    });
    new Workspace(this, "test", {
      agentPoolId: testAgentPool.id,
      executionMode: "agent",
      name: "my-workspace-name",
      organization: testOrganization.name,
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Name of the workspace.
* `organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `description` - (Optional) A description for the workspace.
* `agentPoolId` - (Optional) The ID of an agent pool to assign to the workspace. Requires `executionMode`
  to be set to `agent`. This value _must not_ be provided if `executionMode` is set to any other value or if `operations` is
  provided.
* `allowDestroyPlan` - (Optional) Whether destroy plans can be queued on the workspace.
* `autoApply` - (Optional) Whether to automatically apply changes when a
  Terraform plan is successful. Defaults to `false`.
* `executionMode` - (Optional) Which [execution mode](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings#execution-mode)
  to use. Using Terraform Cloud, valid values are `remote`, `local` or`agent`.
  Defaults to `remote`. Using Terraform Enterprise, only `remote`and `local`
  execution modes are valid.  When set to `local`, the workspace will be used
  for state storage only. This value _must not_ be provided if `operations`
  is provided.
* `assessmentsEnabled` - (Optional) Whether to regularly run health assessments such as drift detection on the workspace. Defaults to `false`.
* `fileTriggersEnabled` - (Optional) Whether to filter runs based on the changed files
  in a VCS push. Defaults to `true`. If enabled, the working directory and
  trigger prefixes describe a set of paths which must contain changes for a
  VCS push to trigger a run. If disabled, any push will trigger a run.
* `globalRemoteState` - (Optional) Whether the workspace allows all workspaces in the organization to access its state data during runs. If false, then only specifically approved workspaces can access its state (`remoteStateConsumerIds`).
* `remoteStateConsumerIds` - (Optional) The set of workspace IDs set as explicit remote state consumers for the given workspace.
* `operations` - **Deprecated** Whether to use remote execution mode.
  Defaults to `true`. When set to `false`, the workspace will be used for
  state storage only. This value _must not_ be provided if `executionMode` is
  provided.
* `projectId` - (Optional) ID of the project where the workspace should be created.
* `queueAllRuns` - (Optional) Whether the workspace should start
  automatically performing runs immediately after its creation. Defaults to
  `true`. When set to `false`, runs triggered by a webhook (such as a commit
  in VCS) will not be queued until at least one run has been manually queued.
  **Note:** This default differs from the Terraform Cloud API default, which
  is `false`. The provider uses `true` as any workspace provisioned with
  `false` would need to then have a run manually queued out-of-band before
  accepting webhooks.
* `sourceName` - (Optional) A friendly name for the application or client
   creating this workspace. If set, this will be displayed on the workspace as
   "Created via <SOURCE NAME>".
   Requires `sourceUrl` to also be set.
* `sourceUrl` - (Optional) A URL for the application or client creating this
   workspace. This can be the URL of a related resource in another app, or a
   link to documentation or other info about the client.
   Requires `sourceName` to also be set.
   **Note:** The API does not (currently) allow this to be updated after a
   workspace has been created, so modifying this value will result in the
   workspace being replaced. To disable this, use an [ignore changes](https://developer.hashicorp.com/terraform/language/meta-arguments/lifecycle#ignore_changes) lifecycle meta-argument
* `speculativeEnabled` - (Optional) Whether this workspace allows speculative
  plans. Defaults to `true`. Setting this to `false` prevents Terraform Cloud
  or the Terraform Enterprise instance from running plans on pull requests,
  which can improve security if the VCS repository is public or includes
  untrusted contributors.
* `structuredRunOutputEnabled` - (Optional) Whether this workspace should
  show output from Terraform runs using the enhanced UI when available.
  Defaults to `true`. Setting this to `false` ensures that all runs in this
  workspace will display their output as text logs.
* `sshKeyId` - (Optional) The ID of an SSH key to assign to the workspace.
* `tagNames` - (Optional) A list of tag names for this workspace. Note that tags must only contain lowercase letters, numbers, colons, or hyphens.
* `terraformVersion` - (Optional) The version of Terraform to use for this
  workspace. This can be either an exact version or a
  [version constraint](https://developer.hashicorp.com/terraform/language/expressions/version-constraints)
  (like `~> 1.0.0`); if you specify a constraint, the workspace will always use
  the newest release that meets that constraint. Defaults to the latest
  available version.
* `triggerPrefixes` - (Optional) List of repository-root-relative paths which describe all locations
  to be tracked for changes.
* `triggerPatterns` - (Optional) List of [glob patterns](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings/vcs#glob-patterns-for-automatic-run-triggering) that describe the files Terraform Cloud monitors for changes. Trigger patterns are always appended to the root directory of the repository. Mutually exclusive with `triggerPrefixes`.
* `workingDirectory` - (Optional) A relative path that Terraform will execute
  within.  Defaults to the root of your repository.
* `vcsRepo` - (Optional) Settings for the workspace's VCS repository, enabling the [UI/VCS-driven run workflow](https://developer.hashicorp.com/terraform/cloud-docs/run/ui).
  Omit this argument to utilize the [CLI-driven](https://developer.hashicorp.com/terraform/cloud-docs/run/cli) and [API-driven](https://developer.hashicorp.com/terraform/cloud-docs/run/api)
  workflows, where runs are not driven by webhooks on your VCS provider.
* `forceDelete` - (Optional) If this attribute is present on a workspace that is being deleted through the provider, it will use the existing force delete API. If this attribute is not present or false it will safe delete the workspace.

The `vcsRepo` block supports:

* `identifier` - (Required) A reference to your VCS repository in the format
  `<vcs organization>/<repository>` where `<vcs organization>` and `<repository>` refer to the organization and repository
  in your VCS provider. The format for Azure DevOps is `<ado organization>/<ado project>/_git/<ado repository>`.
* `branch` - (Optional) The repository branch that Terraform will execute from.
  This defaults to the repository's default branch (e.g. main).
* `ingressSubmodules` - (Optional) Whether submodules should be fetched when
  cloning the VCS repository. Defaults to `false`.
* `oauthTokenId` - (Optional) The VCS Connection (OAuth Connection + Token) to use.
  This ID can be obtained from a `tfeOauthClient` resource. This conflicts with `githubAppInstallationId` and can only be used if `githubAppInstallationId` is not used.
* `githubAppInstallationId` - (Optional) The installation id of the Github App. This conflicts with `oauthTokenId` and can only be used if `oauthTokenId` is not used. 
* `tagsRegex` - (Optional) A regular expression used to trigger a Workspace run for matching Git tags. This option conflicts with `triggerPatterns` and `triggerPrefixes`. Should only set this value if the former is not being used.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The workspace ID.
* `resourceCount` - The number of resources managed by the workspace.
* `htmlUrl` - The URL to the browsable HTML overview of the workspace

## Import

Workspaces can be imported; use `<WORKSPACE ID>` or `<ORGANIZATION NAME>/<WORKSPACE NAME>` as the
import ID. For example:

```shell
terraform import tfe_workspace.test ws-CH5in3chf8RJjrVd
```

```shell
terraform import tfe_workspace.test my-org-name/my-wkspace-name
```

<!-- cache-key: cdktf-0.18.0 input-de112f4c52db39d25f8b816c1c51371daa657d8ca222b05af6488fed41372ef3 -->